{
  "hash": "e2fe3feed96485d0d32e5820324bc95a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: À propos\nlang: fr\nformat:\n  html: default\n  pdf: default\n  docx: default\n---\n\n## Quarto\n\n::: {.callout-note collapse=\"true\"}\n### Ce site est fait avec *Quarto*\n\n<https://quarto.org/docs/websites>.\n:::\n\n## Exemples de code python (jupyter)\n\n:::: {.callout-tip collapse=\"true\"}\n### L'exemple du site Quarto\n\nFor a demonstration of a line plot on a polar axis, see @fig-polar.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](about_files/figure-docx/fig-polar-output-1.png){#fig-polar}\n:::\n:::\n\n\n:::\n\n## Exemple de code OJS (observable)\n\n::: {.callout-tip collapse=\"true\"}\n### Exemple de l'utilisation de la bibliothèque `bertin.js`\n\n*Manhamady OUEDRAOGO (Burkina Faso) & Nicolas LAMBERT (France)* <https://ee-cist.github.io/CAR2_cartodyn/TP2/docs/index.html>\n\n<!-- MENU -->\n\n\n\n```{ojs}\n//| panel: sidebar\nviewof year =  Inputs.range(\n  [1990, 2019], \n  {value: 2019, step: 1, label: \"Année\"}\n)\nviewof k =  Inputs.range(\n  [20, 100], \n  {value: 50, step: 1, label: \"Rayon max\"}\n)\nmeta = FileAttachment(\"data/worldbank_meta.csv\").csv()\nviewof indicator = Inputs.select(\n  new Map(meta.map((d) => [d.indicator, d.shortcode])),\n  { label: \"Indicateur\" }\n)\nprojections = [\"Patterson\", \"NaturalEarth1\", \"Bertin1953\", \"InterruptedSinusoidal\", \"Armadillo\", \"Baker\", \"Gingery\", \"Berghaus\", \"Loximuthal\", \"Healpix\", \"InterruptedMollweideHemispheres\", \"Miller\", \"Aitoff\", \"ConicEqualArea\", \"Eckert3\", \"Hill\"]\nviewof proj = Inputs.select(projections, {label: \"Projection\", width: 350})\nviewof color = Inputs.color({label: \"couleur\", value: \"#4682b4\"})\nviewof simpl =  Inputs.range( [0.01, 0.5], {value: 0.1, step: 0.01, label: \"Simplification\"} )\nviewof x =  Inputs.range( [-180, 180], {value: 0, step: 1, label: \"Rotation (x)\"} )\nviewof y =  Inputs.range( [-90, 90], {value: 0, step: 1, label: \"Rotation (y)\"} )\n```\n\n\n\n\n::: {.panel-tabset}\n<!-- CARTE -->\n## Carte\n\n\n\n```{ojs}\nbertin.draw({\nparams: {projection: proj + `.rotate([${x}, ${y}])`, clip: true }, \nlayers:[\n  { type : \"header\", text: title},\n  {type: \"bubble\", geojson: data, values: indicator, \n  fill: color, fixmax: varmax, k, \n  tooltip: [\"$name\",d => d.properties[indicator]]},\n  {geojson: world2, fill: \"#CCC\"},\n  {type: \"graticule\"},  \n  {type: \"outline\"}\n]})\n```\n\n\n\n\n<!-- DONNEES -->\n## Données\n\n\n\n```{ojs}\nInputs.table(statsyear, {  columns: [\n    \"country\",\n    \"capital_city\",\n    \"region\",\n    indicator\n  ]})\n```\n\n\n\n\n<!-- GRAPHIQUE -->\n## Top 10\n\n\n\n```{ojs}\nviewof topnb = Inputs.range([5, 30], {label: \"Nombre de pays représentés\", step: 1})\ntop = statsyear.sort((a, b) => d3.descending(+a[indicator], +b[indicator]))\n  .slice(0, topnb)\nPlot.plot({\n    marginLeft: 60,\n      grid: true,\n  x: {\n    //type: \"log\",\n    label: \"Années →\"\n  },\n  y: {\n    label: \"↑ Population\",\n    //type: \"log\",\n  },\n  marks: [\n    Plot.barY(top, {\n      x: \"iso3c\",\n      y: indicator,\n      sort: { x: \"y\", reverse: true },\n      fill: color\n    }),\n    Plot.ruleY([0])\n  ]\n})\n```\n\n\n\n:::\n\n<!-- ANNEXE TECHNIQUE -->\n\n\n\n```{ojs}\nworld = FileAttachment(\"data/world.json\").json()\nstats = FileAttachment(\"data/worldbank_data.csv\").csv()\ngeo = require(\"geotoolbox@latest\")\nworld2 = geo.simplify(world, {k: simpl})\nbertin = require(\"bertin@latest\")\nstatsyear = stats.filter(d => d.date == year)\ndata = bertin.merge(world2, \"id\", statsyear, \"iso3c\")\nvarmax = d3.max(stats.filter(d => d.date == 2019), d => +d[indicator])\ntitle = meta.map((d) => [d.indicator, d.shortcode]).find((d) => d[1] == indicator)[0] + \" in \" + year\n```\n\n\n\n\n::::\n\n",
    "supporting": [
      "about_files\\figure-docx"
    ],
    "filters": []
  }
}