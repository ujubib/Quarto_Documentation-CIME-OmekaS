---
title: "Les bibliothécaires référent·e·s"
author: 
 - Viviane Babeix
 - Julien Rabaud
date: 2025-03-24
lang: fr
format:
  html: default
---

::: {style="text-align: center;"}
{{< bi stars color=#ffdd99 size=64px >}}
:::

## Par Collège

```{ojs}
//| echo: false

data = d3.dsv(";", await FileAttachment("../Masters.csv").url());
```

```{ojs}
//| echo: false

// Extraire les valeurs uniques de la colonne "Collège"
uniqueColleges = Array.from(new Set(data.map(row => row.Collège))).sort();

// Ajouter une option "Aucun" pour forcer une sélection explicite
uniqueCollegesWithNone = ["Aucun", ...uniqueColleges];

viewof selectedCollege = Inputs.select(uniqueCollegesWithNone, { label: "Choisissez :", value: "Aucun" });

// Générer le tableau uniquement si une valeur est sélectionnée
selectedCollege !== "Aucun" ? html`
<table class="table-striped table-hover table">
  <caption>Parcours pour le collège ${selectedCollege}</caption>
  <colgroup>
    <col style="width: 55%">
    <col style="width: 20%">
    <col style="width: 25%">
  </colgroup>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Parcours</th>
      <th style="text-align: center;">Campus</th>
      <th style="text-align: center;">Référent·e</th>
    </tr>
  </thead>
  <tbody>
    ${data.filter(row => row.Collège === selectedCollege).map(row => html`
      <tr>
        <td style="text-align: left;">${row.Parcours}</td>
        <td style="text-align: center;">${row.Campus}</td>
        <td style="text-align: center;">${row.Contact}</td>
      </tr>
    `)}
  </tbody>
</table>
` : html`<p class="selectionnez">Sélectionnez un collège pour afficher le tableau.</p>`;
```

::: {style="text-align:center;margin-top:3em;margin-bottom:-3rem;"}
{{< bi incognito color=#ffdd99 size=64px >}}
:::

## Par Référent·e

```{ojs}
//| echo: false

// Extraire les valeurs uniques de la colonne "Contact"
uniqueContacts = Array.from(new Set(data.map(row => row.Contact))).sort();

// Ajouter une option "Aucun" pour forcer une sélection explicite
uniqueContactsWithNone = ["Aucun", ...uniqueContacts];

viewof selectedContact = Inputs.select(uniqueContactsWithNone, { label: "Choisissez :", value: "Aucun" });

// Générer le tableau uniquement si une valeur est sélectionnée
selectedContact !== "Aucun" ? html`
<table class="table-striped table-hover table">
  <caption>Parcours pour ${selectedContact}</caption>
  <colgroup>
    <col style="width: 15%">
    <col style="width: 40%">
    <col style="width: 45%">
  </colgroup>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Collège</th>
      <th style="text-align: left;">Mention</th>
      <th style="text-align: left;">Parcours</th>
    </tr>
  </thead>
  <tbody>
    ${data.filter(row => row.Contact === selectedContact).map(row => html`
      <tr>
        <td style="text-align: left;">${row.Collège}</td>
        <td style="text-align: left;">${row.Mention}</td>
        <td style="text-align: left;">${row.Parcours}</td>
      </tr>
    `)}
  </tbody>
</table>
` : html`<p class="selectionnez">Sélectionnez un·e référent·e pour afficher le tableau.</p>`;
```

## Tableau général

::: {.callout-note collapse="true"}
### Afficher le contenu de `Masters.csv`

```{ojs}
//| echo: false

// Convertir les données en un tableau pour Inputs.table
dt = aq.from(data);

// Afficher le tableau sans filtres
Inputs.table(dt.objects(), { rows: 20, layout: "auto" });
```
:::

::: {#boutonTemplate style="text-align:center"}
<button>[Télécharger `Masters.csv`](../Masters.csv){download="Masters.csv" target="_blank"}</button>
:::

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
  const applySortingAndFiltering = (table) => {
    const headers = table.querySelectorAll("th");
    const tbody = table.querySelector("tbody");

    // Ajouter des champs de filtre sous chaque en-tête
    const filterRow = document.createElement("tr");
    headers.forEach((header, index) => {
      const filterCell = document.createElement("td");
      const input = document.createElement("input");
      input.type = "text";
      input.placeholder = "Filtrer...";
      input.style.width = "100%";
      input.addEventListener("input", () => {
        const filters = Array.from(filterRow.querySelectorAll("input")).map(input => input.value.toLowerCase());
        const rows = Array.from(tbody.querySelectorAll("tr"));
        rows.forEach(row => {
          const cells = Array.from(row.children);
          const matches = cells.every((cell, i) => {
            return filters[i] === "" || cell.textContent.toLowerCase().includes(filters[i]);
          });
          row.style.display = matches ? "" : "none";
        });
      });
      filterCell.appendChild(input);
      filterRow.appendChild(filterCell);
    });
    table.querySelector("thead").appendChild(filterRow);

    // Ajouter le tri
    headers.forEach((header, index) => {
      header.style.cursor = "pointer";
      header.addEventListener("click", () => {
        const rows = Array.from(tbody.querySelectorAll("tr"));

        // Supprimer les classes 'asc' et 'desc' des autres colonnes
        headers.forEach(h => {
          if (h !== header) {
            h.classList.remove("asc", "desc");
          }
        });

        // Basculer les classes 'asc' et 'desc' pour la colonne cliquée
        const isAscending = header.classList.toggle("asc");
        header.classList.toggle("desc", !isAscending);

        // Trier les lignes
        rows.sort((rowA, rowB) => {
          const cellA = rowA.children[index].textContent.trim();
          const cellB = rowB.children[index].textContent.trim();
          return isAscending
            ? cellA.localeCompare(cellB, undefined, { numeric: true })
            : cellB.localeCompare(cellA, undefined, { numeric: true });
        });

        // Réinsérer les lignes triées dans le tableau
        rows.forEach(row => tbody.appendChild(row));
      });
    });
  };

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.tagName === "TABLE" && node.classList.contains("table-striped")) {
          applySortingAndFiltering(node);
        }
      });
    });
  });

  // Observer les changements dans le DOM
  observer.observe(document.body, { childList: true, subtree: true });

  // Appliquer le tri et les filtres aux tableaux déjà présents
  document.querySelectorAll("table.table-striped").forEach(applySortingAndFiltering);
});
</script>
```

```{=html}
<style>
th.asc::after {
  content: " ▲";
}
th.desc::after {
  content: " ▼";
}
input[type="text"] {
  padding: 5px;
  box-sizing: border-box;
}
</style>
```