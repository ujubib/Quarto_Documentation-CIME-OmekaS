---
title: "Les bibliothécaires référent·e·s"
author: 
 - Viviane Babeix
 - Julien Rabaud
date: 2025-03-24
lang: fr
format:
  html: default
---

::: {style="text-align: center;"}
{{< bi stars color=#ffdd99 size=64px >}}
:::

## Par Collège

```{ojs}
//| echo: false

data = d3.dsv(";", await FileAttachment("../Masters.csv").url());
```

```{ojs}
//| echo: false

// Extraire les valeurs uniques de la colonne "Collège"
uniqueColleges = Array.from(new Set(data.map(row => row.Collège))).sort();

// Ajouter une option "Aucun" pour forcer une sélection explicite
uniqueCollegesWithNone = ["Aucun", ...uniqueColleges];

viewof selectedCollege = Inputs.select(uniqueCollegesWithNone, { label: "Choisissez :", value: "Aucun" });

// Générer le tableau uniquement si une valeur est sélectionnée
selectedCollege !== "Aucun" ? html`
<table class="table-striped table-hover table">
  <caption>Parcours pour le collège ${selectedCollege}</caption>
  <colgroup>
    <col style="width: 55%">
    <col style="width: 20%">
    <col style="width: 25%">
  </colgroup>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Parcours</th>
      <th style="text-align: center;">Campus</th>
      <th style="text-align: center;">Référent·e</th>
    </tr>
  </thead>
  <tbody>
    ${data.filter(row => row.Collège === selectedCollege).map(row => html`
      <tr>
        <td style="text-align: left;">${row.Parcours}</td>
        <td style="text-align: center;">${row.Campus}</td>
        <td style="text-align: center;">${row.Contact}</td>
      </tr>
    `)}
  </tbody>
</table>
` : html`<p>Sélectionnez un collège pour afficher le tableau.</p>`;
```

::: {style="text-align:center;margin-top:3em;margin-bottom:-3rem;"}
{{< bi incognito color=#ffdd99 size=64px >}}
:::

## Par Référent·e

```{ojs}
//| echo: false

// Extraire les valeurs uniques de la colonne "Contact"
uniqueContacts = Array.from(new Set(data.map(row => row.Contact))).sort();

// Ajouter une option "Aucun" pour forcer une sélection explicite
uniqueContactsWithNone = ["Aucun", ...uniqueContacts];

viewof selectedContact = Inputs.select(uniqueContactsWithNone, { label: "Choisissez :", value: "Aucun" });

// Générer le tableau uniquement si une valeur est sélectionnée
selectedContact !== "Aucun" ? html`
<table class="table-striped table-hover table">
  <caption>Parcours pour ${selectedContact}</caption>
  <colgroup>
    <col style="width: 20%">
    <col style="width: 40%">
    <col style="width: 40%">
  </colgroup>
  <thead>
    <tr class="header">
      <th style="text-align: left;">Collège</th>
      <th style="text-align: left;">Mention</th>
      <th style="text-align: left;">Parcours</th>
    </tr>
  </thead>
  <tbody>
    ${data.filter(row => row.Contact === selectedContact).map(row => html`
      <tr>
        <td style="text-align: left;">${row.Collège}</td>
        <td style="text-align: left;">${row.Mention}</td>
        <td style="text-align: left;">${row.Parcours}</td>
      </tr>
    `)}
  </tbody>
</table>
` : html`<p>Sélectionnez un·e référent·e pour afficher le tableau.</p>`;
```

## Tableau

::: {.callout-note collapse="true"}
```{ojs}
//| echo: false

dt = aq.from(data)
Inputs.table(dt.objects(), { rows: 20, layout: "fixed"})
```
:::

```{=html}
<script>
document.addEventListener("DOMContentLoaded", function() {
  const applySorting = (table) => {
    const headers = table.querySelectorAll("th");
    headers.forEach((header, index) => {
      header.style.cursor = "pointer";
      header.addEventListener("click", () => {
        const rows = Array.from(table.querySelectorAll("tbody tr"));
        const isAscending = header.classList.toggle("asc");
        header.classList.toggle("desc", !isAscending);

        rows.sort((rowA, rowB) => {
          const cellA = rowA.children[index].textContent.trim();
          const cellB = rowB.children[index].textContent.trim();
          return isAscending
            ? cellA.localeCompare(cellB, undefined, { numeric: true })
            : cellB.localeCompare(cellA, undefined, { numeric: true });
        });

        rows.forEach(row => table.querySelector("tbody").appendChild(row));
      });
    });
  };

  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      mutation.addedNodes.forEach((node) => {
        if (node.tagName === "TABLE" && node.classList.contains("table-striped")) {
          applySorting(node);
        }
      });
    });
  });

  // Observer les changements dans le DOM
  observer.observe(document.body, { childList: true, subtree: true });

  // Appliquer le tri aux tableaux déjà présents
  document.querySelectorAll("table.table-striped").forEach(applySorting);
});
</script>
```

```{=html}
<style>
th.asc::after {
  content: " ▲";
}
th.desc::after {
  content: " ▼";
}
</style>
```